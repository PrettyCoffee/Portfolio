{"version":3,"sources":["ressources/sw-link.png","ressources/me.png","ressources/fitness.png","ressources/dark-souls.png","ressources/music.png","ressources/Teacher.png","components/Toastify/Toastify.tsx","data/colors.js","containers/Home/Colorpicker.tsx","containers/Home/Settings.tsx","containers/Home/Home.tsx","containers/About/About.tsx","containers/CV/CVCard.tsx","data/cv-data.ts","containers/CV/CV.tsx","containers/Coding/Project.tsx","containers/Coding/Coding.tsx","containers/Designs/Designs.tsx","containers/Articles/Article.tsx","data/articles-data.ts","containers/Articles/Articles.tsx","App.tsx","serviceWorker.js","index.tsx","ressources/default-icon.png"],"names":["module","exports","Toastify","props","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","limit","toastAction","msg","toast","dismiss","dark","progress","undefined","c","getColors","console","log","material","result","forEach","color","push","Settings","useState","displayColorPicker","setDisplayColorPicker","var","className","onClick","height","width","colors","onChange","handleColorChange","rgb","r","g","b","a","Colorpicker","defaultValue","Home","displaySettings","setDisplaySettings","header","setHeader","alt","src","swlink","data-text","to","About","birthday","Date","age","getTime","me","icon","faPortrait","Math","floor","fitness","faDumbbell","darksouls","faGamepad","music","faHeart","CVCard","style","type","endDate","startDate","title","subject","details","education","facility","subjectArea","graduation","career","company","profession","subjects","CV","renderCareerElem","elem","renderEducationElem","rows","curEdu","curCar","length","teacher","Project","project","created","latest","lastUpdate","projectYear","getFullYear","description","slice","tags","tag","img","defIcon","name","href","url","faArrowRight","selectOptions","value","label","githubRepositories","gitlabRepositories","Coding","projects","setProjects","currSort","setCurrSort","reload","setReload","projectsJSX","setProjectsJSX","useEffect","promises","gitlabRep","fetch","method","then","res","json","githubRep","headers","Promise","all","tmpProjects","promise","web_url","includes","avatar_url","created_at","last_activity_at","tag_list","html_url","pushed_at","topics","sortProjects","sortedProjects","sort","tmpPrj","prj","options","isSearchable","backspaceRemovesValue","placeholder","Designs","Article","date","toLocaleDateString","authors","author","topic","abstract","articles","text","Articles","articlesJSX","art","defaultColors","App","root","document","documentElement","Object","keys","key","localStorage","getItem","setProperty","faHome","faEnvelope","faXing","faGithubAlt","faGitlab","path","setItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48479f54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sw-link.40aaf72f.png\";","module.exports = __webpack_public_path__ + \"static/media/me.093920a7.png\";","module.exports = __webpack_public_path__ + \"static/media/fitness.8b353ff9.png\";","module.exports = __webpack_public_path__ + \"static/media/dark-souls.b8ba2264.png\";","module.exports = __webpack_public_path__ + \"static/media/music.dbdca655.png\";","module.exports = __webpack_public_path__ + \"static/media/Teacher.6752dc20.png\";","import React from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport \"./Toastify.css\"\r\n\r\nexport function Toastify(props:any){\r\n    return(\r\n        <ToastContainer\r\n            position=\"top-left\"\r\n            autoClose={5000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss={false}\r\n            draggable={false}\r\n            pauseOnHover={false}\r\n            limit={2}\r\n        />\r\n    )\r\n}\r\n\r\nexport function toastAction (msg:string) {\r\n    toast.dismiss();\r\n    toast.dark(msg, {\r\n        position: \"top-left\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: false,\r\n        progress: undefined,\r\n    });\r\n}","import * as material from 'material-colors'\r\n\r\nconst c = [\r\n    \"blueGrey\",\r\n    \"red\",\r\n    \"pink\",\r\n    \"purple\",\r\n    \"deepPurple\",\r\n    \"indigo\",\r\n    \"blue\",\r\n    \"lightBlue\",\r\n    \"cyan\",\r\n    \"teal\",\r\n    \"green\",\r\n    \"lightGreen\",\r\n    \"lime\",\r\n    \"yellow\",\r\n    \"amber\",\r\n    \"orange\",\r\n    \"deepOrange\",\r\n    \"brown\"\r\n]\r\nexport function getColors() {\r\n    console.log(material)\r\n    var result = [[\r\n        \"rgba(46,46,46,1)\",\r\n        \"rgba(230,230,230,1)\",\r\n        \"rgba(50,200,150,.3)\",\r\n        \"rgba(200,50,50,.3)\"\r\n    ],[\r\n        \"rgba(0,0,0,1)\",\r\n        \"rgba(60,60,60,1)\",\r\n        \"rgba(120,120,120,1)\",\r\n        \"rgba(180,180,180,1)\",\r\n        \"rgba(250,250,250,1)\"\r\n    ]]\r\n    c.forEach((color)=>{\r\n        result.push([\r\n            material[color][900],\r\n            material[color][700],\r\n            material[color][500],\r\n            material[color][300],\r\n            material[color][100]\r\n        ])\r\n    })\r\n\r\n    return result\r\n}","import React, {useState} from 'react';\r\nimport { SwatchesPicker } from 'react-color';\r\nimport {getColors} from \"../../data/colors\"\r\n\r\ntype props = {\r\n    handleColorChange: (key: string, color: string) => void,\r\n    var:string,\r\n    defaultValue:string,\r\n}\r\n\r\nexport function Settings(props:props){\r\n    const [displayColorPicker, setDisplayColorPicker]:boolean | any = useState(false)\r\n    \r\n    var handleClick = () => {\r\n        setDisplayColorPicker(!displayColorPicker)\r\n    }\r\n    var handleClose = () => {\r\n        setDisplayColorPicker(false)\r\n    }\r\n    var handleChange = (c:any) => {\r\n        props.handleColorChange(props.var, \"rgba(\"+c.rgb.r+\", \"+c.rgb.g+\", \"+c.rgb.b+\", \"+c.rgb.a+\")\")\r\n    }\r\n    return(\r\n        <div>\r\n            <p>{props.var}</p>\r\n            <div className=\"swatch\" onClick={handleClick}>\r\n                <div className={props.var} />\r\n            </div>\r\n            {displayColorPicker ? \r\n            <div className=\"popover\">\r\n                <div className=\"cover\" onClick={handleClose}/>\r\n                <SwatchesPicker height={169} width={334} colors={getColors()} onChange={handleChange} />\r\n            </div> : null }\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react';\r\n\r\nimport Colorpicker from \"./Colorpicker\"\r\nimport \"./Settings.css\"\r\n\r\ntype props = {\r\n    handleColorChange: (key: string, color: string) => void,\r\n}\r\n\r\nexport function Settings(props:props){\r\n    return(\r\n        <>\r\n            <div className=\"content-body\">\r\n                <Colorpicker\r\n                    handleColorChange={props.handleColorChange}\r\n                    var=\"bg-color\"\r\n                    defaultValue=\"rgba(46,46,46,255)\"\r\n                />\r\n                <Colorpicker\r\n                    handleColorChange={props.handleColorChange}\r\n                    var=\"default-color\"\r\n                    defaultValue=\"rgba(230,230,230,255)\"\r\n                />\r\n                <Colorpicker\r\n                    handleColorChange={props.handleColorChange}\r\n                    var=\"accent-color\"\r\n                    defaultValue=\"rgba(50,200,150,.3)\"\r\n                />\r\n                <Colorpicker\r\n                    handleColorChange={props.handleColorChange}\r\n                    var=\"accent-color2\"\r\n                    defaultValue=\"rgba(200, 50, 50, 0.3)\"\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Settings","import React, {useState} from 'react';\r\nimport Settings from './Settings';\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Home.css\"\r\nimport swlink from \"../../ressources/sw-link.png\" \r\n\r\ntype props = {\r\n    handleColorChange: (key: string, color: string) => void,\r\n}\r\n\r\nexport function Home(props:props){\r\n    const[displaySettings, setDisplaySettings]:boolean|any = useState(false)\r\n    const[header, setHeader]:boolean|any = useState(!displaySettings)\r\n    return(\r\n        <>\r\n            <div className=\"link\">\r\n                <img\r\n                    alt=\"\"\r\n                    src={swlink}\r\n                    onClick={()=>{\r\n                        setDisplaySettings(!displaySettings)\r\n                        setHeader(!header)\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"content-header\">\r\n                <h1>Welcome!</h1>\r\n            </div>\r\n            {displaySettings?(\r\n                <div className=\"color-settings\">\r\n                    <h1 className=\"glitch\" data-text=\"W̴̛̙̝̓̾̀͜e̷̲̹͖̥̯̒̚l̴̥͙̳̀͐ĉ̶̙̱̄̋͘͝ȍ̴͎̀͒̔͒m̷̦͕̖͋́e̶̹̻̩͌̾̂!̷̥̂͝\">W̴̛̙̝̓̾̀͜e̷̲̹͖̥̯̒̚l̴̥͙̳̀͐ĉ̶̙̱̄̋͘͝ȍ̴͎̀͒̔͒m̷̦͕̖͋́e̶̹̻̩͌̾̂!̷̥̂͝</h1>\r\n                    <Settings\r\n                        handleColorChange={props.handleColorChange}\r\n                    />\r\n                </div>\r\n            ):null}\r\n            <div className=\"content-body menu\">\r\n                <Link to=\"/about\"><div>About Me</div></Link>\r\n                <Link to=\"/cv\"><div>CV</div></Link>\r\n                <Link to=\"/coding\"><div>Coding</div></Link>\r\n                <Link to=\"/designs\"><div>Designs (Work in Progress)</div></Link>\r\n                <Link to=\"/articles\"><div>Articles (Work in Progress)</div></Link>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default Home","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faPortrait, faGamepad, faDumbbell } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport \"./About.css\"\r\nimport me from \"../../ressources/me.png\"\r\nimport fitness from \"../../ressources/fitness.png\"\r\nimport darksouls from \"../../ressources/dark-souls.png\"\r\n//import bouldering from \"../../ressources/bouldering.png\"\r\nimport music from \"../../ressources/music.png\"\r\n\r\n\r\nexport function About(props:any){\r\n    //let age = new Date('1996-05-17T00:00:00')\r\n    let birthday = new Date(1996, 4, 17)\r\n    let age = (new Date().getTime() - birthday.getTime()) / 1000 / 60 / 60 / 24 / 365\r\n    //let age = Math.floor(new Date() - birthday)\r\n    return(\r\n        <div>\r\n            <div className=\"content-header content-header-me\">\r\n                <h1>About Me</h1>\r\n            </div>\r\n            <div className=\"pic-r\"><img alt=\"\" src={me}/></div>\r\n            <div className=\"content-body content-body-me\">\r\n                <h2>Details <FontAwesomeIcon className=\"h2-icon\" icon={faPortrait}/></h2>\r\n                <p>\r\n                    Jonathan<br/>\r\n                    {Math.floor(age)} years old<br/>\r\n                    B.Sc. Informatics<br/>\r\n                    Web-Developer<br/>\r\n                    German | English<br/>\r\n                </p>\r\n            </div>\r\n            <div className=\"pic-l\"><img alt=\"\" src={fitness}/></div>\r\n            <div className=\"content-body content-body-me\">\r\n                <h2>Sports <FontAwesomeIcon className=\"h2-icon\" icon={faDumbbell}/></h2>\r\n                <p>\r\n                In my opinion, sport is important for mental health and the body itself.<br/>\r\n                That's one of the reasons why I do both bouldering and climbing - besides my little obsession of it.\r\n                </p>\r\n            </div>\r\n            <div className=\"pic-r\"><img alt=\"\" src={darksouls}/></div>\r\n            <div className=\"content-body content-body-me\">\r\n                <h2>Videogames <FontAwesomeIcon className=\"h2-icon\" icon={faGamepad}/></h2>\r\n                <p>\r\n                Videogames are a great hobby to calm down and train your mind. <br/>\r\n                Besides ARPGs like Dark Souls I am also playing rythm games like Beat-Saber. And much more if there is enough spare time left!\r\n                </p>\r\n            </div>\r\n            <div className=\"pic-l\"><img alt=\"\" src={music}/></div>\r\n            <div className=\"content-body content-body-me\">\r\n                <h2>Music I <FontAwesomeIcon className=\"h2-icon\" icon={faHeart}/></h2>\r\n                <p>\r\n                    I am always listening to music because it fits every mood. I have been jumping between many genres the last years. To name some of them:<br/>\r\n                    - Doom/Black Metal<br/>\r\n                    - Lofi Hip-Hop<br/>\r\n                    - Videogame Soundtracks<br/>\r\n                    - Speedcore<br/>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default About","import React from 'react';\r\n\r\nimport \"./CV.css\"\r\n\r\ntype props = {\r\n    type:string,\r\n    title:string,\r\n    startDate:number,\r\n    endDate:number|undefined,\r\n    subject:string,\r\n    details:string,\r\n}\r\n\r\nexport function CVCard(props:props){\r\n    var style:string\r\n    if (props.type === \"edu\") {\r\n    \tstyle=\"time-education\"\r\n    } else {\r\n    \tstyle=\"time-career\"\r\n    }\r\n    var endDate = (props.endDate === 0)? \"Now\" : props.endDate\r\n    return(\r\n        <>\r\n            <div className={style}><span>{props.startDate} - {endDate}</span></div>\r\n            <div className=\"content-body\">\r\n                <h2>{props.title}</h2>\r\n                <p>{props.subject}</p>\r\n                <p>{props.details}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default CVCard","export type education_item = {\r\n    startDate:number,\r\n    endDate:number,\r\n    facility:string,\r\n    subjectArea:string,\r\n    graduation:string,\r\n}\r\nexport const education:education_item[] = [\r\n    {\r\n        startDate: 2017,\r\n        endDate:0,\r\n        facility:\"Cooperative State University Stuttgart\",\r\n        subjectArea:\"Informatics\",\r\n        graduation:\"Bachelor of Science\",\r\n    },\r\n    {\r\n        startDate: 2015,\r\n        endDate:2017,\r\n        facility:\"Gottlieb-Daimler-Schule 2\",\r\n        subjectArea:\"Industrial Design\",\r\n        graduation:\"State-certified industrial design assistant; Advanced technical college certificate\",\r\n    },\r\n    {\r\n        startDate: 2012,\r\n        endDate:2015,\r\n        facility:\"Steinbeisschule Stuttgart\",\r\n        subjectArea:\"Carpentry\",\r\n        graduation:\"Carpenter journeyman's certificate\",\r\n    },\r\n]\r\n\r\nexport type career_item = {\r\n    startDate:number,\r\n    endDate:number,\r\n    company:string,\r\n    profession:string,\r\n    subjects:string[],\r\n}\r\nexport const career:career_item[] = [\r\n    {\r\n        startDate:2017,\r\n        endDate:0,\r\n        company:\"heureka e-Business GmbH\",\r\n        profession:\"Web-Development\",\r\n        subjects:[\"ColdFusion\", \"React\", \"MariaDB\"],\r\n    },\r\n    {\r\n        startDate:2012,\r\n        endDate:2015,\r\n        company:\"Scheyhing Holzbau GmbH\",\r\n        profession:\"Carpentry\",\r\n        subjects:[]\r\n    },\r\n]","import React from 'react';\r\nimport CVCard from \"./CVCard\"\r\n\r\nimport teacher from \"../../ressources/Teacher.png\"\r\nimport \"./CV.css\"\r\nimport {education_item, education, career_item, career} from \"../../data/cv-data\"\r\n\r\nexport function CV(props:any){\r\n\r\n    //Get CVCard with career details\r\n    let renderCareerElem = (elem:career_item) => {\r\n        let subjects:string = \"\"\r\n        if (elem.subjects) {\r\n            elem.subjects.forEach(subject => {\r\n                subjects += subject+\"; \"\r\n            });\r\n        }\r\n        return (\r\n            <CVCard\r\n                type={\"car\"}\r\n                title={elem.company}\r\n                startDate={elem.startDate}\r\n                endDate={elem.endDate}\r\n                subject={elem.profession}\r\n                details={subjects}\r\n            />\r\n        )\r\n    }\r\n            \r\n    //Get CVCard with education details\r\n    let renderEducationElem = (elem:education_item) => {\r\n        return (\r\n            <CVCard\r\n                type={\"edu\"}\r\n                title={elem.facility}\r\n                startDate={elem.startDate}\r\n                endDate={elem.endDate}\r\n                subject={elem.subjectArea}\r\n                details={elem.graduation}\r\n            />\r\n        )\r\n    }\r\n\r\n    //Get alle rows of cv\r\n    let rows:JSX.Element[] = []\r\n    let curEdu = 0\r\n    let curCar = 0\r\n    for (;true;) {\r\n        if (education[curEdu] && career[curCar] && education[curEdu].endDate === career[curCar].endDate) {\r\n            rows.push(\r\n                <div className=\"cv-row\">\r\n                    {renderCareerElem(career[curCar])}\r\n                    {renderEducationElem(education[curEdu])}\r\n                </div>\r\n            )\r\n            curEdu++\r\n            curCar++\r\n        } else {\r\n            if (!education[curEdu]\r\n                || career[curCar].endDate === 0\r\n                || (career[curCar] && career[curCar].endDate > education[curEdu]?.endDate)) {\r\n                rows.push(\r\n                    <div className=\"cv-row\">\r\n                        {renderCareerElem(career[curCar])}\r\n                        <span className=\"empty-cv-card\"></span>\r\n                    </div>\r\n                )\r\n                curCar++\r\n            } else if (education[curEdu]) {\r\n                rows.push(\r\n                    <div className=\"cv-row\">\r\n                        <span className=\"empty-cv-card\"></span>\r\n                        {renderEducationElem(education[curEdu])}\r\n                    </div>\r\n                )\r\n                curEdu++\r\n            }\r\n        }\r\n        if (curEdu === education.length && curCar === career.length) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"cv-content\">\r\n                <div className=\"cv-row\">\r\n                    <div className=\"content-header cv-desktop-header\">\r\n                        <h1>Career</h1>\r\n                    </div>\r\n                    <div className=\"content-header cv-desktop-header\">\r\n                        <h1>Education</h1>\r\n                    </div>\r\n                    <div className=\"content-header cv-mobile-header\">\r\n                        <h1>{\"Career|Education\"}</h1>\r\n                    </div>\r\n                    <div className=\"teacher\"><img alt=\"\" src={teacher}/></div>\r\n                </div>\r\n                {rows}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default CV","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport \"./Coding.css\"\r\nimport defIcon from \"../../ressources/default-icon.png\"\r\n\r\ntype project = {\r\n    img:string,\r\n    name:string,\r\n    description:string,\r\n    url:string,\r\n    created:string,\r\n    lastUpdate:string,\r\n    tags:string[],\r\n}\r\n\r\nexport function Project(project:project){\r\n    //calc project duration\r\n    let created = new Date(project.created)\r\n    let latest = new Date(project.lastUpdate)\r\n    let projectYear:string = (created.getFullYear() === latest.getFullYear())\r\n        ? created.getFullYear()+\"\"\r\n        : created.getFullYear() + \"-\" + latest.getFullYear()\r\n\r\n    //crop description\r\n    let description = (project.description.length > 77)?project.description.slice(0,77)+\"...\":project.description\r\n\r\n    //format tags\r\n    let tags:JSX.Element[] = []\r\n    project.tags.forEach((tag:string) => {\r\n        tags.push(\r\n            <span>\r\n                {tag}\r\n            </span>\r\n        )\r\n    });\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"time-project\"><span>{projectYear}</span></div>\r\n            <div className=\"project-container\">\r\n                <div className=\"project-image\"><img src={(project.img)?project.img:defIcon} alt=\"Project Avatar\"/></div>\r\n                <div className=\"project-details\">\r\n                    <h2>{project.name}</h2>\r\n                    <div className=\"project-tag-container\">{tags}</div>\r\n                    <p className=\"project-description\">\r\n                        {(project.description !== \"\")?description:\"No description available\"}\r\n                    </p>\r\n                    <a className=\"button project-button\" href={project.url}>Go to Project <FontAwesomeIcon icon={faArrowRight}/></a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Project","import React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select'\r\nimport {toastAction} from \"../../components/Toastify/Toastify\"\r\n\r\nimport Project from \"./Project\"\r\nimport \"./Coding.css\"\r\n\r\ntype project = {\r\n    img:string,\r\n    name:string,\r\n    description:string,\r\n    url:string,\r\n    created:string,\r\n    lastUpdate:string,\r\n    tags:string[],\r\n}\r\n\r\nconst selectOptions = [\r\n    { value: 'chgUp',     label: 'latest change' },\r\n    { value: 'crtUp',     label: 'newest created' },\r\n    { value: 'crtDown',   label: 'oldest created' },\r\n]\r\n\r\n//Add new projects here\r\nconst githubRepositories = [\r\n    \"PrettyCoffee/PrettyCoffee.github.io\",\r\n]\r\nconst gitlabRepositories = [\r\n    \"14827017\", //Golang Audio API\r\n    \"14252893\", //Smugloader\r\n    \"16123962\", //ASE-JavaChat\r\n]\r\n\r\nexport function Coding(props:any){\r\n    const [projects, setProjects]:project[]|any = useState([])\r\n    const [currSort, setCurrSort]:any = useState(selectOptions[0])\r\n    const [reload, setReload]:boolean | any = useState(false)\r\n    const [projectsJSX, setProjectsJSX]:JSX.Element[] | any = useState([])\r\n    \r\n    //get all wanted projects\r\n    useEffect(() => {\r\n        let promises:Promise<any>[] = []\r\n\r\n        //Add Gitlab repos\r\n        gitlabRepositories.forEach((gitlabRep) => {\r\n            promises.push(\r\n                fetch(\"https://gitlab.com/api/v4/projects/\"+gitlabRep, {\r\n                    method:'GET'\r\n                })\r\n                .then(res => res.json())\r\n            )\r\n        })\r\n        //Add Github repos\r\n        githubRepositories.forEach(githubRep => {\r\n            promises.push(\r\n                fetch(\"https://api.github.com/repos/\"+githubRep, {\r\n                    method:'GET',\r\n                    headers: {\r\n                        'Accept':'application/vnd.github.mercy-preview+json',\r\n                    }\r\n                })\r\n                .then(res => res.json())\r\n            )\r\n        })\r\n        //process joined responses\r\n        //Since you should not update states without set functions, the promises have to be joined\r\n        Promise.all([...promises])\r\n        .then(result => {\r\n            let tmpProjects = [...projects]\r\n            //Add Projects\r\n            result.forEach(promise => {\r\n                //Gitlab has Avatar\r\n                if (promise.web_url?.includes(\"gitlab.com\")) {\r\n                    tmpProjects.push({\r\n                        img:        promise.avatar_url,\r\n                        name:       promise.name,\r\n                        description:promise.description,\r\n                        url:        promise.web_url,\r\n                        created:    promise.created_at,\r\n                        lastUpdate: promise.last_activity_at,\r\n                        tags:       (promise.tag_list)?promise.tag_list:[],\r\n                    })\r\n                //Github has no Avatar\r\n                } else {\r\n                    tmpProjects.push({\r\n                        img:        \"\",\r\n                        name:       promise.name,\r\n                        description:promise.description,\r\n                        url:        promise.html_url,\r\n                        created:    promise.created_at,\r\n                        lastUpdate: promise.pushed_at,\r\n                        tags:       (promise.topics)?promise.topics:[],\r\n                    })\r\n                }\r\n            })\r\n            //tmpProjects.sort(sortProjects)\r\n            setProjects([...tmpProjects])\r\n            setReload(true)\r\n        })\r\n    },[]);\r\n\r\n\r\n    //Call if projects shouls be sorted and displayed again\r\n    let reloadProjects = (options:any) => {\r\n        toastAction('Sorted by '+options.label)\r\n        setCurrSort(options)\r\n        setReload(true)\r\n    }\r\n\r\n    //project sort function to call with array.sort()\r\n    let sortProjects = (a:project,b:project) => {\r\n        let result:number = 1\r\n        switch (currSort.value){\r\n            case selectOptions[0].value:\r\n                result = new Date(b.lastUpdate).getTime() - new Date(a.lastUpdate).getTime()\r\n            break\r\n            case selectOptions[1].value:\r\n                result = new Date(b.created).getTime() - new Date(a.created).getTime()\r\n            break\r\n            case selectOptions[2].value:\r\n                result = new Date(a.created).getTime() - new Date(b.created).getTime()\r\n        }\r\n        return result\r\n    }\r\n\r\n    //Update jsx if project is added\r\n    useEffect(() => {\r\n        if(projects !== undefined && reload === true) {\r\n            //Sort Projects\r\n            let sortedProjects = [...projects]\r\n            sortedProjects.sort(sortProjects)\r\n\r\n            //Insert projects in html\r\n            let tmpPrj:JSX.Element[] = []\r\n            sortedProjects.forEach((prj:project) => {\r\n                tmpPrj.push(\r\n                    <Project\r\n                        {...prj}\r\n                    />\r\n                )\r\n            })\r\n            setReload(false)\r\n            setProjectsJSX([...tmpPrj])\r\n        }\r\n    }, [reload, projects])\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"content-header coding-header\">\r\n                <h1>Coding Projects</h1>\r\n            </div>\r\n            <Select \r\n                className=\"coding-sort\"\r\n                options={selectOptions}\r\n                onChange={reloadProjects}\r\n                isSearchable={false}\r\n                backspaceRemovesValue={false}\r\n                placeholder=\"sort by\"\r\n            />\r\n            <div>\r\n            {projectsJSX}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Coding","import React from 'react';\r\n\r\n\r\nexport function Designs(props:any){\r\n    return(\r\n        <div>\r\n            {\"\"}\r\n        </div>\r\n    )\r\n}\r\nexport default Designs","import React from 'react';\r\nimport { article } from \"../../data/articles-data\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport defIcon from \"../../ressources/default-icon.png\"\r\n\r\nexport function Article(props:article){\r\n    let date = new Date(props.date).toLocaleDateString()\r\nconsole.log(props.authors.length)\r\n    //format authors\r\n    let authors:JSX.Element[] = [\r\n        (props.authors.length > 1)\r\n            ?(<>{\"Autoren: \"}</>)\r\n            :(<>{\"Autor: \"}</>)\r\n    ]\r\n    props.authors.forEach((author:string) => {\r\n        authors.push(\r\n            <span>\r\n                {author}\r\n            </span>\r\n        )\r\n    });\r\n    //format tags\r\n    let topics:JSX.Element[] = []\r\n    props.topics.forEach((topic:string) => {\r\n        topics.push(\r\n            <span>\r\n                {topic}\r\n            </span>\r\n        )\r\n    });\r\n\r\n    //TODO: Responsive styling on topics -> they destroy everything if you add too much\r\n    return(\r\n        <>\r\n            <div className=\"article-date\"><span>{date}</span></div>\r\n            <div className=\"article-container\">\r\n                <div className=\"article-image\"><img src={props.img?props.img:defIcon} alt=\"Article Thumbnail\"/></div>\r\n                <div className=\"article-details\">\r\n                    <h2>{props.title}</h2>\r\n                    <div className=\"article-infos\">\r\n                        <div className=\"article-author-container\">{authors}</div>\r\n                        <div className=\"article-topics-container\">{topics}</div>\r\n                    </div>\r\n                    <p className=\"article-abstract\">\r\n                        {props.abstract}\r\n                    </p>\r\n                    <a className=\"button article-button\" href={props.url}>Go to Article <FontAwesomeIcon icon={faArrowRight}/></a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Article","\r\nexport type article = {\r\n    img:string|undefined,\r\n    date:string,\r\n    title:string,\r\n    abstract:string,\r\n    text?:string|undefined,\r\n    url:string|undefined,\r\n    topics:string[],\r\n    authors:string[]\r\n}\r\nexport const articles:article[] = [\r\n    {\r\n        img:        \"https://raw.githubusercontent.com/PrettyCoffee/PrettyCoffee.github.io/development/src/ressources/react_coldfusion.png\",\r\n        date:       \"2020-03-06\",\r\n        title:      \"Webentwicklung mit ColdFusion und ReactJS\",\r\n        abstract:   \"In diesem Artikel soll dargelegt werden, wie eine moderne Webapplikation mit den Sprachen ColdFusion und React programmiert werden kann. Hierbei wird ebenso das Prinzip von Rest APIs und einer Möglichkeit der Authentifizierung betrachtet.\",\r\n        text:       undefined,\r\n        url:        \"https://www.heureka.com/de/fachartikel/webentwicklung-mit-coldfusion-und-reactjs\",\r\n        topics:     [\"ColdFusion\", \"React\", \"Rest API\", \"JSON Web Token\"],\r\n        authors:    [\"Jonathan Holz\"]\r\n    }\r\n]","import React from 'react';\r\nimport Article from \"./Article\"\r\nimport { articles, article } from \"../../data/articles-data\"\r\nimport \"./Articles.css\"\r\nexport function Articles(props:any){\r\n    let articlesJSX:JSX.Element[] = []\r\n    articles.forEach((art:article) => {\r\n        articlesJSX.push(\r\n            <Article {...art}/>\r\n        )\r\n    })\r\n    return(\r\n        <>\r\n            <div>\r\n                <div className=\"content-header articles-header\">\r\n                    <h1>Articles</h1>\r\n                </div>\r\n                <div className=\"content-header articles-disclaimer\">\r\n                    <p>Disclaimer: Since my english is not academic, I will proceed with german at this point because the phrasing, in my opinion, is very important at this topic. </p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                {articlesJSX}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\nexport default Articles","import React, {useState} from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport {Toastify, toastAction} from \"./components/Toastify/Toastify\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\nimport { faGithubAlt, faGitlab, faXing } from '@fortawesome/free-brands-svg-icons'\r\n\r\n//My Sites\r\nimport Home from \"./containers/Home/Home\"\r\nimport About from \"./containers/About/About\"\r\nimport CV from \"./containers/CV/CV\"\r\nimport Coding from \"./containers/Coding/Coding\"\r\nimport Designs from \"./containers/Designs/Designs\"\r\nimport Articles from \"./containers/Articles/Articles\"\r\n\r\nimport \"./App.css\"\r\n\r\ntype colors = {\r\n\t[key:string]:string\r\n\t'bg-color':string,\r\n\t'default-color':string,\r\n\t'accent-color':string,\r\n\t'accent-color2':string,\r\n}\r\nconst defaultColors:colors = {\r\n\t'bg-color': \"rgba(46,46,46,255)\",\r\n\t'default-color': \"rgba(230,230,230,255)\",\r\n\t'accent-color': \"rgba(50,200,150,.3)\",\r\n\t'accent-color2': \"rgba(200, 50, 50, 0.3)\",\r\n}\r\nexport default function App() {\r\n\t//Prepare colors\r\n\tvar root = document.documentElement;\r\n\tObject.keys(defaultColors).forEach(key => {\r\n\t\tvar c = localStorage.getItem(key)\r\n\t\tif (c) {\r\n\t\t\troot.style.setProperty(\"--\"+key, c);\r\n\t\t}\r\n\t});\r\n\r\n\tvar handleColorChange = (key:string, color:string) => {\r\n\t\troot.style.setProperty(\"--\"+key, color);\r\n\t\ttoastAction(key+' changed to '+color)\r\n\t\tlocalStorage.setItem(key, color);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div className=\"content-wrapper\">\r\n\t\t\t<Toastify/>\r\n\t\t\t\t<div className=\"icon-container\">\r\n\t\t\t\t\t<Link className=\"back\" to=\"/\"><FontAwesomeIcon icon={faHome}/></Link>\r\n\t\t\t\t\t<a href=\"MailTo:jonathan-holz@outlook.com\">\r\n\t\t\t\t\t\t<FontAwesomeIcon  icon={faEnvelope}/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href=\"https://www.xing.com/profile/Jonathan_Holz2/cv\">\r\n\t\t\t\t\t\t<FontAwesomeIcon  icon={faXing}/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href=\"https://github.com/PrettyCoffee\">\r\n\t\t\t\t\t\t<FontAwesomeIcon  icon={faGithubAlt}/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href=\"https://gitlab.com/PrettyCoffee\">\r\n\t\t\t\t\t\t<FontAwesomeIcon  icon={faGitlab}/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Switch >\r\n\t\t\t\t\t<Route path=\"/articles\">\r\n\t\t\t\t\t\t<Articles />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/designs\">\r\n\t\t\t\t\t\t<Designs />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/coding\">\r\n\t\t\t\t\t\t<Coding />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/about\">\r\n\t\t\t\t\t\t<About />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/CV\">\r\n\t\t\t\t\t\t<CV />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/\">\r\n\t\t\t\t\t\t<Home \r\n\t\t\t\t\t\t\thandleColorChange={handleColorChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t);\r\n}\r\n/* State Routing System */\r\n/*\r\nreturn (\r\n\t<div className=\"content-wrapper\">\r\n\t\t<Toastify/>\r\n\t\t<div className=\"icon-container\">\r\n\t\t\t<div className=\"back\" onClick={() => setPage(\"home\")}><FontAwesomeIcon icon={faHome}/></div>\r\n\t\t\t<a href=\"MailTo:jonathan-holz@outlook.com\">\r\n\t\t\t\t<FontAwesomeIcon  icon={faEnvelope}/>\r\n\t\t\t</a>\r\n\t\t\t<a href=\"https://www.xing.com/profile/Jonathan_Holz2/cv\">\r\n\t\t\t\t<FontAwesomeIcon  icon={faXing}/>\r\n\t\t\t</a>\r\n\t\t\t<a href=\"https://github.com/PrettyCoffee\">\r\n\t\t\t\t<FontAwesomeIcon  icon={faGithubAlt}/>\r\n\t\t\t</a>\r\n\t\t\t<a href=\"https://gitlab.com/PrettyCoffee\">\r\n\t\t\t\t<FontAwesomeIcon  icon={faGitlab}/>\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t</div>\r\n)\r\nconst[page, setPage]:string|any = useState(\"home\")\r\n\r\n{( page === \"about\" ) ? \r\n\t<About/>\r\n: ( page === \"cv\" ) ? \r\n\t<CV/>\r\n: ( page === \"coding\" ) ? \r\n\t<Coding/>\r\n: ( page === \"designs\" ) ? \r\n\t<Designs/>\r\n: ( page === \"articles\" ) ? \r\n\t<Articles/>\r\n: ( // default case is Home\r\n\t<Home \r\n\t\thandleColorChange={handleColorChange}\r\n\t\tsetPage={setPage}\r\n\t/>\r\n)}\r\n*/\r\n\r\n/* Disabled Routing because github.io cant handle it\r\nIf Reemplementing you will have to change menu links and the home icon to <Link /> \r\nreturn (\r\n\t<Router>\r\n\t<div className=\"content-wrapper\">\r\n\t\t<Toastify/>\r\n\t\t\t<div className=\"icon-container\">\r\n\t\t\t\t<Link className=\"back\" to=\"/\"><FontAwesomeIcon icon={faHome}/></Link>\r\n\t\t\t\t<a href=\"MailTo:jonathan-holz@outlook.com\">\r\n\t\t\t\t\t<FontAwesomeIcon  icon={faEnvelope}/>\r\n\t\t\t\t</a>\r\n\t\t\t\t<a href=\"https://www.xing.com/profile/Jonathan_Holz2/cv\">\r\n\t\t\t\t\t<FontAwesomeIcon  icon={faXing}/>\r\n\t\t\t\t</a>\r\n\t\t\t\t<a href=\"https://github.com/PrettyCoffee\">\r\n\t\t\t\t\t<FontAwesomeIcon  icon={faGithubAlt}/>\r\n\t\t\t\t</a>\r\n\t\t\t\t<a href=\"https://gitlab.com/PrettyCoffee\">\r\n\t\t\t\t\t<FontAwesomeIcon  icon={faGitlab}/>\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t\t<Switch >\r\n\t\t\t\t<Route path=\"/articles\">\r\n\t\t\t\t\t<Articles />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/designs\">\r\n\t\t\t\t\t<Designs />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/Coding\">\r\n\t\t\t\t\t<Coding />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/about\">\r\n\t\t\t\t\t<About />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/CV\">\r\n\t\t\t\t\t<CV />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/\">\r\n\t\t\t\t\t<Home \r\n\t\t\t\t\t\thandleColorChange={handleColorChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t</Router>\r\n\t</div>\r\n);\r\n*/","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/default-icon.28517636.png\";"],"sourceRoot":""}